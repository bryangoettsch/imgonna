version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: imgonna-postgres-dev
    environment:
      POSTGRES_DB: imgonna
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - imgonna-dev-network

  # Go API Backend (Development with hot reload)
  backend-dev:
    image: golang:1.24-alpine
    container_name: imgonna-backend-dev
    working_dir: /app
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=imgonna
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_SSL_MODE=disable
      - PORT=8080
      - ENVIRONMENT=development
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    volumes:
      - ./backend:/app
      - go_modules:/go/pkg/mod
    networks:
      - imgonna-dev-network
    command: ["sh", "-c", "go mod download && go run main.go"]

  # React Frontend (Development with hot reload)
  frontend-dev:
    image: node:20-alpine
    container_name: imgonna-frontend-dev
    working_dir: /app
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:5173"
    depends_on:
      - backend-dev
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    networks:
      - imgonna-dev-network
    command: ["sh", "-c", "npm install && npm run dev -- --host 0.0.0.0"]

volumes:
  postgres_dev_data:
  go_modules:
  node_modules:

networks:
  imgonna-dev-network:
    driver: bridge